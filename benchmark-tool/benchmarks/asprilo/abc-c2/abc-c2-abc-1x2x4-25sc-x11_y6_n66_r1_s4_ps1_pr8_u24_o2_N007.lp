

init(object(highway,1),value(at,(1,1))).
init(object(highway,2),value(at,(2,1))).
init(object(highway,3),value(at,(3,1))).
init(object(highway,4),value(at,(4,1))).
init(object(highway,5),value(at,(5,1))).
init(object(highway,7),value(at,(7,1))).
init(object(highway,8),value(at,(8,1))).
init(object(highway,9),value(at,(9,1))).
init(object(highway,10),value(at,(10,1))).
init(object(highway,11),value(at,(11,1))).
init(object(highway,12),value(at,(1,2))).
init(object(highway,13),value(at,(2,2))).
init(object(highway,14),value(at,(3,2))).
init(object(highway,15),value(at,(4,2))).
init(object(highway,16),value(at,(5,2))).
init(object(highway,17),value(at,(6,2))).
init(object(highway,18),value(at,(7,2))).
init(object(highway,19),value(at,(8,2))).
init(object(highway,20),value(at,(9,2))).
init(object(highway,21),value(at,(10,2))).
init(object(highway,22),value(at,(11,2))).
init(object(highway,23),value(at,(1,3))).
init(object(highway,28),value(at,(6,3))).
init(object(highway,33),value(at,(11,3))).
init(object(highway,34),value(at,(1,4))).
init(object(highway,39),value(at,(6,4))).
init(object(highway,44),value(at,(11,4))).
init(object(highway,45),value(at,(1,5))).
init(object(highway,46),value(at,(2,5))).
init(object(highway,47),value(at,(3,5))).
init(object(highway,48),value(at,(4,5))).
init(object(highway,49),value(at,(5,5))).
init(object(highway,50),value(at,(6,5))).
init(object(highway,51),value(at,(7,5))).
init(object(highway,52),value(at,(8,5))).
init(object(highway,53),value(at,(9,5))).
init(object(highway,54),value(at,(10,5))).
init(object(highway,55),value(at,(11,5))).
init(object(highway,57),value(at,(2,6))).
init(object(highway,58),value(at,(3,6))).
init(object(highway,59),value(at,(4,6))).
init(object(highway,60),value(at,(5,6))).
init(object(highway,61),value(at,(6,6))).
init(object(highway,62),value(at,(7,6))).
init(object(highway,63),value(at,(8,6))).
init(object(highway,64),value(at,(9,6))).
init(object(highway,65),value(at,(10,6))).
init(object(highway,66),value(at,(11,6))).
init(object(node,1),value(at,(1,1))).
init(object(node,2),value(at,(2,1))).
init(object(node,3),value(at,(3,1))).
init(object(node,4),value(at,(4,1))).
init(object(node,5),value(at,(5,1))).
init(object(node,6),value(at,(6,1))).
init(object(node,7),value(at,(7,1))).
init(object(node,8),value(at,(8,1))).
init(object(node,9),value(at,(9,1))).
init(object(node,10),value(at,(10,1))).
init(object(node,11),value(at,(11,1))).
init(object(node,12),value(at,(1,2))).
init(object(node,13),value(at,(2,2))).
init(object(node,14),value(at,(3,2))).
init(object(node,15),value(at,(4,2))).
init(object(node,16),value(at,(5,2))).
init(object(node,17),value(at,(6,2))).
init(object(node,18),value(at,(7,2))).
init(object(node,19),value(at,(8,2))).
init(object(node,20),value(at,(9,2))).
init(object(node,21),value(at,(10,2))).
init(object(node,22),value(at,(11,2))).
init(object(node,23),value(at,(1,3))).
init(object(node,24),value(at,(2,3))).
init(object(node,25),value(at,(3,3))).
init(object(node,26),value(at,(4,3))).
init(object(node,27),value(at,(5,3))).
init(object(node,28),value(at,(6,3))).
init(object(node,29),value(at,(7,3))).
init(object(node,30),value(at,(8,3))).
init(object(node,31),value(at,(9,3))).
init(object(node,32),value(at,(10,3))).
init(object(node,33),value(at,(11,3))).
init(object(node,34),value(at,(1,4))).
init(object(node,35),value(at,(2,4))).
init(object(node,36),value(at,(3,4))).
init(object(node,37),value(at,(4,4))).
init(object(node,38),value(at,(5,4))).
init(object(node,39),value(at,(6,4))).
init(object(node,40),value(at,(7,4))).
init(object(node,41),value(at,(8,4))).
init(object(node,42),value(at,(9,4))).
init(object(node,43),value(at,(10,4))).
init(object(node,44),value(at,(11,4))).
init(object(node,45),value(at,(1,5))).
init(object(node,46),value(at,(2,5))).
init(object(node,47),value(at,(3,5))).
init(object(node,48),value(at,(4,5))).
init(object(node,49),value(at,(5,5))).
init(object(node,50),value(at,(6,5))).
init(object(node,51),value(at,(7,5))).
init(object(node,52),value(at,(8,5))).
init(object(node,53),value(at,(9,5))).
init(object(node,54),value(at,(10,5))).
init(object(node,55),value(at,(11,5))).
init(object(node,56),value(at,(1,6))).
init(object(node,57),value(at,(2,6))).
init(object(node,58),value(at,(3,6))).
init(object(node,59),value(at,(4,6))).
init(object(node,60),value(at,(5,6))).
init(object(node,61),value(at,(6,6))).
init(object(node,62),value(at,(7,6))).
init(object(node,63),value(at,(8,6))).
init(object(node,64),value(at,(9,6))).
init(object(node,65),value(at,(10,6))).
init(object(node,66),value(at,(11,6))).
init(object(order,1),value(line,(4,1))).
init(object(order,1),value(line,(5,1))).
init(object(order,1),value(line,(7,1))).
init(object(order,1),value(line,(8,1))).
init(object(order,1),value(pickingStation,1)).
init(object(order,2),value(line,(1,1))).
init(object(order,2),value(line,(2,1))).
init(object(order,2),value(line,(3,1))).
init(object(order,2),value(line,(6,1))).
init(object(order,2),value(pickingStation,1)).
init(object(pickingStation,1),value(at,(6,1))).
init(object(product,1),value(on,(1,4))).
init(object(product,1),value(on,(2,9))).
init(object(product,1),value(on,(3,1))).
init(object(product,1),value(on,(4,1))).
init(object(product,2),value(on,(4,1))).
init(object(product,3),value(on,(1,2))).
init(object(product,4),value(on,(1,1))).
init(object(product,5),value(on,(2,1))).
init(object(product,6),value(on,(2,1))).
init(object(product,6),value(on,(4,1))).
init(object(product,7),value(on,(4,1))).
init(object(product,8),value(on,(3,1))).
init(object(robot,1),value(at,(1,6))).
init(object(shelf,1),value(at,(2,3))).
init(object(shelf,2),value(at,(3,3))).
init(object(shelf,3),value(at,(4,3))).
init(object(shelf,4),value(at,(7,3))).



#program initial.
robot(R) :- init(object(robot,R),_).
shelf(S) :- init(object(shelf,S),_).
station(P) :- init(object(pickingStation,P),_).
product(A) :- init(object(product,A),_).

isRobot(robot(R)) :- robot(R).
isShelf(shelf(S)) :- shelf(S).
isStation(station(T)) :- station(T).
isProduct(product(A)) :- product(A).
isOrder(order(O)) :- order(O).

order(O) :- init(object(order,O),_).
ordered(order(O),product(A)) :- init(object(order,O),value(line,(A,_))).      % IGNORING QUANTITIES
target(order(O),station(P)) :- init(object(order,O),value(pickingStation,P)).

shelved(shelf(S),product(A)) :- init(object(product,A),value(on,(S,_))).        % IGNORING QUANTITIES

position((X,Y)) :- init(object(node,_),value(at,(X,Y))).

position_station(station(P),(X,Y)) :- init(object(pickingStation,P),value(at,(X,Y))).

position(robot(R),(X,Y)) :- init(object(robot,R),value(at,(X,Y))).
position(shelf(S),(X,Y)) :- init(object(shelf,S),value(at,(X,Y))).

highway(C) :- init(object(highway,_),value(at,C)).



direction((X,Y)) :- X=-1..1, Y=-1..1, |X+Y|=1.
nextto((X,Y),(X',Y'),(X+X',Y+Y')) :- position((X,Y)), direction((X',Y')), position((X+X',Y+Y')).

#program dynamic.

{ move(R,D) : _direction(D) ;
    pickup(R,S) : _isShelf(S) ;
    putdown(R,S) : _isShelf(S) } 1 :- _isRobot(R).
move(R) :- move(R,_).

waits(R) :- not pickup(R,_), not putdown(R,_), not move(R,_), _isRobot(R).

position(R,C) :- move(R,D), 'position(R,C'), _nextto(C',D,C).
:- move(R,D), 'position(R,C), not _nextto(C ,D,_).

carries(R,S) :- pickup(R,S).
:- pickup(R,S), 'carries(R,_).
:- pickup(R,S), 'carries(_,S).
:- pickup(R,S), 'position(R,C), not 'position(S,C).
:- pickup(R,S), 'position(S,C), not 'position(R,C).

:- putdown(R,S), not 'carries(R,S).

serves(R,S,P) :- position(R,C), carries(R,S), _position_station(P,C), strategy.

position(R,C) :- 'position(R,C), not move(R,_), _isRobot(R).
carries(R,S) :- 'carries(R,S), not putdown(R,S).

position(S,C) :- position(R,C), carries(R,S).
position(S,C) :- 'position(S,C), not carries(_,S), _isShelf(S).

moveto(C',C) :- _nextto(C',D,C), 'position(R,C'), move(R,D).
:- moveto(C',C), moveto(C,C'), C < C'.

:- { position(R,C) : _isRobot(R) } > 1, _position(C).
:- { position(S,C) : _isShelf(S) } > 1, _position(C).

:- { position(R,C) } != 1, _isRobot(R).
:- { position(S,C) } != 1, _isShelf(S).

:- { carries(R,S) } > 1, _isRobot(R).
:- { carries(R,S) } > 1, _isShelf(S).



position(R,(X,Y)) :- positionX(R,X), positionY(R,Y).
:- _highway(C), not carries(_,S), position(S,C), _isShelf(S). % shelves must not stand on highways
:- _highway(C), waits(R), position(R,C). % waiting on a highway is not allowed




occurs(object(robot,R),action(move,D)) :- move(robot(R),D).
occurs(object(robot,R),action(pickup,())) :- pickup(robot(R),_).
occurs(object(robot,R),action(putdown,())) :- putdown(robot(R),_).

occurs_a(object(robot,R),action(deliver,(O,A))) :- process(product(A),order(O),C), toShelf(S,C), 'position(robot(R),C).
occurs_b(object(robot,R),action(deliver,(O,A))) :- process(product(A),order(O),C), 'atShelf(S,C), 'carries(robot(R),S).
occurs_c(object(robot,R),action(deliver,(O,A))) :- process(product(A),order(O),C), position(S,C), 'carries(robot(R),S), _shelved(S,product(A)).
occurs_d(object(robot,R),action(deliver,(O,A,N))) :- process(product(A),order(O),S,N), 'carries(robot(R),S).





instant(shelf(S)) :- _position(shelf(S),C), _position_station(_,C), strategy.

process(A,O,C) :- _ordered(O,A), _target(O,P), _position_station(P,C), _shelved(S,A), not _position(S,C), position(S,C).
process(A,O,C) :- _ordered(O,A), _target(O,P), _position_station(P,C), _shelved(S,A), _position(S,C), carries(_,S).
processed(A,C) :- process(A,O,C).
processed(A,C) :- 'processed(A,C).

#program final.

:- _ordered(O,A), _target(O,P), _position_station(P,C), not processed(A,C).

:- carries(_,_).

:- _position_station(_,C), position(_,C).





#program dynamic.
pickup(S) :- pickup(_,S). putdown(S) :- putdown(_,S).



:- _isShelf(S), &tel{ (pickup(S) & < <? pickup(S)) | (putdown(S) & < <? putdown(S)) }.





